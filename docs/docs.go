// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/auth/login": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login User",
                "parameters": [
                    {
                        "description": "User",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginValidation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User Logged In",
                        "schema": {
                            "$ref": "#/definitions/handler.Login.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid fields",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/auth/register": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register new User",
                "parameters": [
                    {
                        "description": "User",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RegisterValidation"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User Created",
                        "schema": {
                            "$ref": "#/definitions/handler.Register.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid fields",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "User already exists",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/products": {
            "get": {
                "description": "Get all products",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Get all products",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handler.ProductData"
                            }
                        }
                    },
                    "404": {
                        "description": "No products found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to get products",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Create product",
                "parameters": [
                    {
                        "description": "Product data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateProductValidation"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Product created successfully",
                        "schema": {
                            "$ref": "#/definitions/handler.ProductData"
                        }
                    },
                    "400": {
                        "description": "Invalid fields",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create product",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/products/{code}": {
            "get": {
                "description": "Get product by code",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Get product by code",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product code",
                        "name": "code",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.ProductData"
                        }
                    },
                    "404": {
                        "description": "Invalid product code",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to get product",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Update product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product code",
                        "name": "code",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Product data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateProductValidation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product updated successfully",
                        "schema": {
                            "$ref": "#/definitions/handler.ProductData"
                        }
                    },
                    "400": {
                        "description": "Invalid fields",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Invalid product code",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to update product",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Delete product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product code",
                        "name": "code",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Invalid product code",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to delete product",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/transaction/balance": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get Account Balance",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Get Account Balance",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.GetBalance.BalanceResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to get balance",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/transaction/history": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get user's transactions history",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Get user's transactions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.GetOrders.OrderResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "No transactions found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to get transactions",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/transaction/payment": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "User's purchase products and pay the merchant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Payment",
                "parameters": [
                    {
                        "description": "Payment",
                        "name": "payment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PaymentValidation"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handler.Payment.PaymentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid Fields",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to payment",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/transaction/topup": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Topup user's balance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Topup user's balance",
                "parameters": [
                    {
                        "description": "Topup",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TopupValidation"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.Topup.TopupResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid fields",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to topup",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handler.GetBalance.BalanceResponse": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "number"
                },
                "owner": {
                    "type": "string"
                }
            }
        },
        "handler.GetOrders.OrderResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "buyer": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "invoice": {
                    "type": "string"
                },
                "merchant": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/models.Type"
                }
            }
        },
        "handler.Login.LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                }
            }
        },
        "handler.Payment.PaymentResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "buyer": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "invoice": {
                    "type": "string"
                },
                "merchant": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/models.Type"
                }
            }
        },
        "handler.ProductData": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "merchant": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "weight": {
                    "type": "number"
                }
            }
        },
        "handler.Register.RegisterResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User Registered successfully, please login"
                }
            }
        },
        "handler.Topup.TopupResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "invoice": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/models.Type"
                }
            }
        },
        "models.CreateProductValidation": {
            "type": "object",
            "required": [
                "code",
                "name",
                "price"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "minLength": 3
                },
                "name": {
                    "type": "string",
                    "minLength": 3
                },
                "price": {
                    "type": "number"
                },
                "weight": {
                    "type": "number"
                }
            }
        },
        "models.LoginValidation": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.PaymentValidation": {
            "type": "object",
            "required": [
                "code",
                "qty"
            ],
            "properties": {
                "code": {
                    "type": "string"
                },
                "qty": {
                    "type": "integer"
                }
            }
        },
        "models.RegisterValidation": {
            "type": "object",
            "required": [
                "password",
                "role",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "minLength": 6
                },
                "role": {
                    "$ref": "#/definitions/models.Role"
                },
                "username": {
                    "type": "string",
                    "minLength": 6
                }
            }
        },
        "models.Role": {
            "type": "string",
            "enum": [
                "CLIENT",
                "MERCHANT"
            ],
            "x-enum-varnames": [
                "Client",
                "Merchant"
            ]
        },
        "models.TopupValidation": {
            "type": "object",
            "required": [
                "amount"
            ],
            "properties": {
                "amount": {
                    "type": "number"
                }
            }
        },
        "models.Type": {
            "type": "string",
            "enum": [
                "TOPUP",
                "PAYMENT",
                "REVENUE"
            ],
            "x-enum-varnames": [
                "Topup",
                "Payment",
                "Revenue"
            ]
        },
        "models.UpdateProductValidation": {
            "type": "object",
            "required": [
                "name",
                "price"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 3
                },
                "price": {
                    "type": "number"
                },
                "weight": {
                    "type": "number"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3000",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Fiber-Mini Commerce",
	Description:      "API Documentation for Fiber-Mini Commerce which is an e-commerce application.\nWhere user either can be a client or merchant. Client can buy product and merchant can sell product.\nPS: Authorization cannot be used in this project because OpenAPi 2.0 does not support Bearer Token.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
